import google.generativeai as genai
from concurrent.futures import ThreadPoolExecutor
import asyncio
from config import AI_TOKEN

genai.configure(api_key=AI_TOKEN)
model = genai.GenerativeModel("models/gemini-2.0-flash")

executor = ThreadPoolExecutor()

def _generate_summary(prompt: str) -> str:
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"


async def summarize_news(news_articles: list[str], output_language: str) -> str:
    max_chars = 16000
    combined_text = ""
    for article in news_articles:
        if len(combined_text) + len(article) > max_chars:
            break
        combined_text += article + "\n\n"

    prompt = (
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ —Å—É–º–º–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏. "
        f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ {output_language} —è–∑—ã–∫–µ.\n\n"
        "üîπ –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, —Ñ–∞–∫—Ç—ã –∏ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏.\n"
        "üîπ –ò–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–æ–≤ –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏.\n"
        "üîπ –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏ –∏ –∞–±–∑–∞—Ü—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        "üîπ –ü–∏—à–∏ –ø–æ–Ω—è—Ç–Ω–æ, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ –≤—Ä–æ–¥–µ # * >.\n"
        "üîπ –°—Ç–∞—Ä–∞–π—Å—è –æ—Ö–≤–∞—Ç–∏—Ç—å –≤—Å—ë –≤–∞–∂–Ω–æ–µ, –∏–∑–±–µ–≥–∞—è –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏.\n\n"
        "–í–æ—Ç —Å—Ç–∞—Ç—å–∏:\n\n"
        f"{combined_text}"
    )

    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(executor, _generate_summary, prompt)
